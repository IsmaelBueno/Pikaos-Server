#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pikaos-server:server');
var http = require('http');
var moment = require('moment');
var db = require('../db');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 8090);
app.set('port', port);

/**
 * Create HTTP server.
 */

 /*
const options = {
  key: fs.readFileSync('key'),
  cert: fs.readFileSync('key-cert')
};*/

var server = http.createServer(app);


//CHAT
var io = require('socket.io').listen(server);

io.on('connection', (socket) => {

    socket.on('firstConnection',function(chat){
      socket.join(chat);
    });

    socket.on('clientMessage', function(chat,user,message) {

        console.log("Iniciado el chat " + chat);
        console.log("usuario: "+ user);
        console.log("texto: "+ message);
        var hour = moment().format("HH:MM:SS").toString();
        var date = moment().format("YYYY-MM-DD").toString();

        db.query("INSERT INTO message VALUES(0,?,(select id from user where name = ?),?,?,?)",[chat,user,hour,date,message],(err)=>{

          if(err!=null)
            console.log(err);

            socket.join(chat);
            io.sockets.in(chat).emit('serverResponse', user,message,hour,date);

        });
    });
});

//--------------------------



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
